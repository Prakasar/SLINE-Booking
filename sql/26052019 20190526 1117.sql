--
-- Script was generated by Devart dbForge Studio 2019 for MySQL, Version 8.1.22.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 26-05-2019 11:17:22
-- Server version: 5.5.58-0ubuntu0.14.04.1
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE sql12292861;

--
-- Drop function `GetDistance`
--
DROP FUNCTION IF EXISTS GetDistance;

--
-- Drop procedure `usp_doc_hospitalList`
--
DROP PROCEDURE IF EXISTS usp_doc_hospitalList;

--
-- Drop procedure `usp_doc_hospital_search`
--
DROP PROCEDURE IF EXISTS usp_doc_hospital_search;

--
-- Drop table `doc_hospital_status`
--
DROP TABLE IF EXISTS doc_hospital_status;

--
-- Drop procedure `usp_auth_authentication`
--
DROP PROCEDURE IF EXISTS usp_auth_authentication;

--
-- Drop procedure `usp_doc_user_profile`
--
DROP PROCEDURE IF EXISTS usp_doc_user_profile;

--
-- Drop table `doc_user`
--
DROP TABLE IF EXISTS doc_user;

--
-- Drop procedure `usp_doc_booking`
--
DROP PROCEDURE IF EXISTS usp_doc_booking;

--
-- Drop procedure `usp_doc_booking_histry`
--
DROP PROCEDURE IF EXISTS usp_doc_booking_histry;

--
-- Drop procedure `usp_doc_doctorList_byHospital`
--
DROP PROCEDURE IF EXISTS usp_doc_doctorList_byHospital;

--
-- Drop table `doc_booking_doctor`
--
DROP TABLE IF EXISTS doc_booking_doctor;

--
-- Drop table `doc_doctor_profile`
--
DROP TABLE IF EXISTS doc_doctor_profile;

--
-- Drop table `doc_hospital`
--
DROP TABLE IF EXISTS doc_hospital;

--
-- Drop table `doc_hospital_doctor_map`
--
DROP TABLE IF EXISTS doc_hospital_doctor_map;

--
-- Drop table `doc_mst_taxonomy`
--
DROP TABLE IF EXISTS doc_mst_taxonomy;

--
-- Drop table `doc_status`
--
DROP TABLE IF EXISTS doc_status;

--
-- Drop procedure `usp_doc_email_verification`
--
DROP PROCEDURE IF EXISTS usp_doc_email_verification;

--
-- Drop table `doc_user_profile`
--
DROP TABLE IF EXISTS doc_user_profile;

--
-- Set default database
--
USE sql12292861;

--
-- Create table `doc_user_profile`
--
CREATE TABLE doc_user_profile (
  profile_id INT(11) NOT NULL AUTO_INCREMENT,
  first_name VARCHAR(55) DEFAULT NULL,
  last_name VARCHAR(55) DEFAULT NULL,
  dob DATETIME DEFAULT NULL,
  email_id VARCHAR(555) DEFAULT NULL,
  email_verification VARCHAR(255) DEFAULT NULL,
  verification_on DATETIME DEFAULT NULL,
  mobile_no VARCHAR(12) DEFAULT NULL,
  mob_verification_on DATETIME DEFAULT NULL,
  city VARCHAR(255) DEFAULT NULL,
  address TEXT DEFAULT NULL,
  pincode VARCHAR(6) DEFAULT NULL,
  phone VARCHAR(25) DEFAULT NULL,
  state_id INT(11) DEFAULT NULL,
  district_id INT(11) DEFAULT NULL,
  city_id INT(11) DEFAULT NULL,
  is_active BIT(1) DEFAULT NULL,
  created_on DATETIME DEFAULT NULL,
  img_path VARCHAR(555) DEFAULT NULL,
  PRIMARY KEY (profile_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 9,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create procedure `usp_doc_email_verification`
--
CREATE DEFINER = 'sql12292861'@'%'
PROCEDURE usp_doc_email_verification(in_mail varchar(555),in_verification_code varchar(150))
BEGIN
if exists( SELECT
    *
  FROM doc_user_profile
  WHERE email_id = in_mail
  AND email_verification = in_verification_code) THEN

     if exists( SELECT
    *
  FROM doc_user_profile
  WHERE email_id = in_mail
  AND email_verification = in_verification_code
  AND verification_on IS NULL) THEN

UPDATE doc_user_profile
SET verification_on = SYSDATE()
WHERE email_id = in_mail
AND email_verification = in_verification_code
AND verification_on IS NULL;

SELECT
  'Email verified successfully.' AS msg;
ELSE
SELECT
  'Email already verified.' AS msg;
END IF;

ELSE
SELECT
  'Something went wrong.' AS msg;
END IF;
END
$$

DELIMITER ;

--
-- Create table `doc_status`
--
CREATE TABLE doc_status (
  doc_status_id INT(11) DEFAULT NULL,
  doctor_id INT(11) DEFAULT NULL,
  status_on DATE DEFAULT NULL,
  fromTime DATETIME DEFAULT NULL,
  toTime DATETIME DEFAULT NULL,
  is_Available BIT(1) DEFAULT NULL
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `doc_mst_taxonomy`
--
CREATE TABLE doc_mst_taxonomy (
  taxonomy_id INT(11) NOT NULL AUTO_INCREMENT,
  asset_id INT(11) DEFAULT NULL,
  group_name VARCHAR(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  taxonomy_code VARCHAR(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  taxonomy_name VARCHAR(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  taxonomy_value VARCHAR(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  taxonomy_numeric DECIMAL(18, 2) DEFAULT NULL,
  taxonomy_type VARCHAR(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  taxonomy_category VARCHAR(50) DEFAULT NULL COMMENT '(''global, organisation'')',
  priority_order INT(11) DEFAULT NULL,
  parent_id INT(11) DEFAULT NULL,
  is_active TINYINT(1) DEFAULT NULL,
  created_on DATETIME DEFAULT NULL,
  PRIMARY KEY (taxonomy_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 5,
AVG_ROW_LENGTH = 4096,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

--
-- Create table `doc_hospital_doctor_map`
--
CREATE TABLE doc_hospital_doctor_map (
  hospital_id INT(11) NOT NULL,
  doctor_id INT(11) NOT NULL,
  is_active BIT(1) DEFAULT NULL
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `doc_hospital`
--
CREATE TABLE doc_hospital (
  hospital_id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(500) DEFAULT NULL,
  ownere_name VARCHAR(255) DEFAULT NULL,
  email_id VARCHAR(555) DEFAULT NULL,
  phone_no VARCHAR(25) DEFAULT NULL,
  mob_no VARCHAR(15) DEFAULT NULL,
  address TEXT DEFAULT NULL,
  logo VARCHAR(555) DEFAULT NULL,
  is_active BIT(1) DEFAULT NULL,
  created_on DATE DEFAULT NULL,
  latitude DECIMAL(20, 18) DEFAULT NULL,
  longitude DECIMAL(20, 18) DEFAULT NULL,
  PRIMARY KEY (hospital_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `doc_doctor_profile`
--
CREATE TABLE doc_doctor_profile (
  doctor_id INT(11) NOT NULL AUTO_INCREMENT,
  doc_name VARCHAR(55) DEFAULT NULL,
  last_name VARCHAR(55) DEFAULT NULL,
  education VARCHAR(555) DEFAULT NULL,
  mobile_no VARCHAR(15) DEFAULT NULL,
  phone_no VARCHAR(25) DEFAULT NULL,
  email_id VARCHAR(255) DEFAULT NULL,
  specialization_id INT(11) DEFAULT NULL,
  dob DATE DEFAULT NULL,
  jod VARCHAR(255) DEFAULT NULL,
  experiance INT(11) DEFAULT NULL,
  description TEXT DEFAULT NULL,
  rd DATE DEFAULT NULL,
  created_on DATE DEFAULT NULL,
  created_by INT(11) DEFAULT NULL,
  is_active BIT(1) DEFAULT NULL,
  PRIMARY KEY (doctor_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 5,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `doc_booking_doctor`
--
CREATE TABLE doc_booking_doctor (
  booking_id INT(11) NOT NULL AUTO_INCREMENT,
  doctor_id INT(11) DEFAULT NULL,
  hospital_id INT(11) DEFAULT NULL,
  patient_name VARCHAR(255) DEFAULT NULL,
  patient_id INT(11) DEFAULT NULL,
  patient_mobile DECIMAL(12, 0) DEFAULT NULL,
  timing DATETIME DEFAULT NULL,
  treatement_description TEXT DEFAULT NULL,
  medical_description TEXT DEFAULT NULL,
  counseling_fees DECIMAL(18, 2) DEFAULT NULL,
  medical_fees DECIMAL(18, 2) DEFAULT NULL,
  is_success BIT(1) DEFAULT NULL,
  created_on DATETIME DEFAULT NULL,
  appointment_on DATE DEFAULT NULL,
  booked_by INT(11) DEFAULT NULL,
  purpose_of_visit VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (booking_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 5,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create procedure `usp_doc_doctorList_byHospital`
--
CREATE DEFINER = 'sql12292861'@'%'
PROCEDURE usp_doc_doctorList_byHospital(IN in_hospital_id INT, IN in_booking_date DATE)
BEGIN

   SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;


-- SELECT
--   dm.doctor_id,
--   dh.hospital_id,
--   CONCAT(dp.doc_name, ' ', dp.last_name) AS doctorName,
--   dp.education,
--   dp.mobile_no,
--   dp.mobile_no,
--   dp.email_id,
--   sp.taxonomy_name AS specialisation,
--   dp.experiance,
--   ' ' AS bookingTime,
--   CONCAT(DATE_FORMAT(ds.fromTime, '%r'), ' - ', DATE_FORMAT(ds.toTime, '%r')) AS availableTime,
--   dh.logo
-- FROM doc_doctor_profile AS dp
--   INNER JOIN doc_hospital_doctor_map AS dm
--     ON dp.doctor_id = dm.doctor_id
--     AND dm.is_active = 1
--   INNER JOIN doc_hospital AS dh
--     ON dh.hospital_id = dm.hospital_id
--     AND dh.is_active = 1
--   INNER JOIN doc_mst_taxonomy AS sp
--     ON sp.taxonomy_id = dp.specialization_id
--     AND sp.taxonomy_type = 'DoctorSpecialisation'
--   INNER JOIN doc_status AS ds
--     ON ds.doctor_id = dp.doctor_id
--     AND ds.is_Available = 1
-- WHERE dp.is_active = 1
-- AND dh.hospital_id = in_hospital_id;


SELECT
  dm.doctor_id,
  dh.hospital_id,
  CONCAT(dp.doc_name, ' ', dp.last_name) AS doctorName,
  dp.education,
  dp.mobile_no,
  dp.mobile_no,
  dp.email_id,
  sp.taxonomy_name AS specialisation,
  dp.experiance,

  CONCAT(DATE_FORMAT(ds.fromTime, '%r'), ' - ', DATE_FORMAT(ds.toTime, '%r')) AS availableTime,
  dh.logo,
  IFNULL(c.booked, 0) bookedcount,
  IFNULL(dcoBook.bookingTime, ds.fromTime) AS bookinTime
FROM doc_doctor_profile AS dp
  INNER JOIN doc_hospital_doctor_map AS dm
    ON dp.doctor_id = dm.doctor_id
    AND dm.is_active = 1
  INNER JOIN doc_hospital AS dh
    ON dh.hospital_id = dm.hospital_id
    AND dh.is_active = 1
  INNER JOIN doc_mst_taxonomy AS sp
    ON sp.taxonomy_id = dp.specialization_id
    AND sp.taxonomy_type = 'DoctorSpecialisation'
  INNER JOIN doc_status AS ds
    ON ds.doctor_id = dp.doctor_id
    AND ds.is_Available = 1
  LEFT JOIN (SELECT
      MAX(DATE_ADD(book.timing, INTERVAL 15 MINUTE)) AS bookingTime,
      book.appointment_on,
      book.doctor_id
    FROM doc_booking_doctor AS
    book
    GROUP BY book.doctor_id,
             book.appointment_on) AS dcoBook
    ON dcoBook.doctor_id = ds.doctor_id
    AND dcoBook.appointment_on = ds.status_on
  LEFT OUTER JOIN (SELECT
      COUNT(db.booking_id) AS booked,
      db.doctor_id,
      db.appointment_on
    FROM doc_booking_doctor AS db
    GROUP BY db.doctor_id,
             db.appointment_on) AS c
    ON c.doctor_id = ds.doctor_id
    AND c.appointment_on = ds.status_on

WHERE dp.is_active = 1
AND dh.hospital_id = in_hospital_id
AND ds.status_on = in_booking_date;


   SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;

END
$$

--
-- Create procedure `usp_doc_booking_histry`
--
CREATE DEFINER = 'sql12292861'@'%'
PROCEDURE usp_doc_booking_histry(in in_user_id int)
BEGIN

SELECT
  bd.patient_name,
  bd.purpose_of_visit,
  bd.appointment_on,
  dp.doc_name,
  dh.name,
  dh.logo,
  bd.is_success
FROM doc_booking_doctor AS bd
  INNER JOIN doc_doctor_profile AS dp
    ON bd.doctor_id = dp.doctor_id
  INNER JOIN doc_hospital AS dh
    ON dh.hospital_id = bd.hospital_id
WHERE bd.booked_by = in_user_id;

END
$$

--
-- Create procedure `usp_doc_booking`
--
CREATE DEFINER = 'sql12292861'@'%'
PROCEDURE usp_doc_booking(IN in_doctor_id INT, IN in_hospital_id INT, IN in_patient_name VARCHAR(150), IN in_patient_mob_no NUMERIC(12,0), IN in_appointment_on DATE, IN in_timing DATETIME, IN in_booked_by INT, IN in_purpose VARCHAR(255))
BEGIN

INSERT INTO doc_booking_doctor (doctor_id,
hospital_id,
patient_name,
patient_id,
patient_mobile,
timing,
is_success,
created_on,
appointment_on,
booked_by, purpose_of_visit)
  VALUES (in_doctor_id, in_hospital_id, in_patient_name, in_booked_by, in_patient_mob_no, in_timing, 0, SYSDATE(), in_appointment_on, in_booked_by, in_purpose);


END
$$

DELIMITER ;

--
-- Create table `doc_user`
--
CREATE TABLE doc_user (
  user_id INT(11) NOT NULL AUTO_INCREMENT,
  profile_id INT(11) DEFAULT NULL,
  user_type_id INT(11) NOT NULL COMMENT 'if 0 is user login if 1 is hospital login',
  mobile VARCHAR(15) NOT NULL,
  email_id VARCHAR(255) NOT NULL,
  password VARCHAR(555) NOT NULL,
  password_parse VARCHAR(555) DEFAULT NULL,
  is_active BIT(1) DEFAULT NULL,
  PRIMARY KEY (user_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 8,
AVG_ROW_LENGTH = 2340,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create procedure `usp_doc_user_profile`
--
CREATE DEFINER = 'sql12292861'@'%'
PROCEDURE usp_doc_user_profile(IN in_profile_id INT, IN in_first_name VARCHAR(55), IN in_last_name VARCHAR(55), IN in_dob DATETIME, IN in_email_id VARCHAR(555), IN in_mobile_no VARCHAR(15), IN in_city VARCHAR(150), IN in_address TEXT, IN in_pincode VARCHAR(6), IN in_phone VARCHAR(20), IN in_state_id INT, IN in_district_id INT, IN in_city_id INT, IN in_password VARCHAR(255), IN in_pwd_parse VARCHAR(255), IN in_img_url VARCHAR(555))
BEGIN
  
  IF(in_profile_id=0) then 

    SET @in_email_verification_code= hex(RAND()*106478638764373974);

INSERT INTO doc_user_profile (first_name,
last_name,
dob,
email_id,
email_verification,
mobile_no,
-- mob_verification_on , 
city,
address,
pincode,
phone,
state_id,
district_id,
city_id,
is_active,
created_on,
img_path)
  VALUES (in_first_name, in_last_name, in_dob, in_email_id, @in_email_verification_code, in_mobile_no, in_city, in_address, in_pincode, in_phone, in_state_id, in_district_id, in_city_id, 1, CURRENT_DATE, in_img_url);
 

  SET @profile_id= last_insert_id();

INSERT INTO doc_user (profile_id, user_type_id, mobile, email_id, password, password_parse, is_active)
  VALUES (@profile_id, 0, in_mobile_no, in_email_id, in_password, in_pwd_parse, 0);



ELSEIF (in_profile_id > 0) THEN

UPDATE doc_user_profile
SET first_name = in_first_name,
    last_name = in_last_name,
    dob = in_dob,
    email_id = in_email_id,
    mobile_no = in_mobile_no,
    city = in_city,
    address = in_address,
    pincode = in_pincode,
    phone = in_phone,
    state_id = in_state_id,
    district_id = in_district_id,
    city_id = in_city_id
WHERE profile_id = in_profile_id;

END IF;

SELECT
  @in_email_verification_code AS verification_code;

END
$$

--
-- Create procedure `usp_auth_authentication`
--
CREATE DEFINER = 'sql12292861'@'%'
PROCEDURE usp_auth_authentication(in_user_name varchar(255))
BEGIN


SELECT
  *
FROM doc_user
WHERE (mobile = in_user_name
OR email_id = in_user_name);


END
$$

DELIMITER ;

--
-- Create table `doc_hospital_status`
--
CREATE TABLE doc_hospital_status (
  status_id INT(11) NOT NULL AUTO_INCREMENT,
  hospital_id INT(11) DEFAULT NULL,
  valid_from DATETIME NOT NULL,
  valid_to DATETIME NOT NULL,
  status BIT(1) NOT NULL,
  created_on DATETIME DEFAULT NULL,
  created_by INT(11) DEFAULT NULL,
  PRIMARY KEY (status_id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 4,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create procedure `usp_doc_hospital_search`
--
CREATE DEFINER = 'sql12292861'@'%'
PROCEDURE usp_doc_hospital_search(in search_key varchar(150))
BEGIN

  
SET @search_key=search_key;

  SET @searchSQL=CONCAT('select * from doc_hospital WHERE name like ''%',@search_key,'%''');

  PREPARE dynamic_statement FROM @searchSQL;
  EXECUTE dynamic_statement;
  DEALLOCATE PREPARE dynamic_statement;
END
$$

--
-- Create procedure `usp_doc_hospitalList`
--
CREATE DEFINER = 'sql12292861'@'%'
PROCEDURE usp_doc_hospitalList(IN in_lattitude NUMERIC(20,18), IN in_longitute numeric(20,18))
BEGIN

  
set @Latitude=in_lattitude;
set @Longitude=in_longitute;
SELECT
  FORMAT(DEGREES(ACOS(LEAST(COS(RADIANS(a.Latitude))
  * COS(RADIANS(@Latitude))
  * COS(RADIANS(a.Longitude - @Longitude))
  + SIN(RADIANS(a.Latitude))
  * SIN(RADIANS(@Latitude)), 1.0))), 2) AS distance_in_km,
  a.*
FROM doc_hospital a
WHERE FORMAT(DEGREES(ACOS(LEAST(COS(RADIANS(a.Latitude))
* COS(RADIANS(@Latitude))
* COS(RADIANS(a.Longitude - @Longitude))
+ SIN(RADIANS(a.Latitude))
* SIN(RADIANS(@Latitude)), 1.0))), 2) <= 20;



-- set @lat=in_lattitude;-- 11.004230;
-- set @long=in_longitute; -- 77.024323;
-- 
-- 
-- SELECT
--   FORMAT((ST_DISTANCE_SPHERE(POINT(@lat, @long), POINT(dh.latitude, dh.longitude)) / 1000), 2) km,
--   dh.*
-- FROM doc_hospital AS dh
-- WHERE (ST_DISTANCE_SPHERE(
-- POINT(@lat, @long),
-- POINT(dh.latitude, dh.longitude)
-- ) / 1000) <= 20;
END
$$

--
-- Create function `GetDistance`
--
CREATE DEFINER = 'sql12292861'@'%'
FUNCTION GetDistance(coordinate1 VARCHAR(120), coordinate2 VARCHAR(120))
  RETURNS varchar(120) CHARSET latin1
BEGIN
	DECLARE pos_comma1, pos_comma2 INT;
	DECLARE lon1, lon2, lat1, lat2, distance DECIMAL(18,12);

SELECT
  LOCATE(',', coordinate1) INTO pos_comma1;
SELECT
  LOCATE(',', coordinate1, pos_comma1 + 1) INTO pos_comma2;
SELECT
  CAST(SUBSTRING(coordinate1, 1, pos_comma1 - 1) AS decimal(18, 12)) INTO lon1;
SELECT
  CAST(SUBSTRING(coordinate1, pos_comma1 + 1, pos_comma2 - pos_comma1 - 1) AS decimal(18, 12)) INTO lat1;

SELECT
  LOCATE(',', coordinate2) INTO pos_comma1;
SELECT
  LOCATE(',', coordinate2, pos_comma1 + 1) INTO pos_comma2;
SELECT
  CAST(SUBSTRING(coordinate2, 1, pos_comma1 - 1) AS decimal(18, 12)) INTO lon2;
SELECT
  CAST(SUBSTRING(coordinate2, pos_comma1 + 1, pos_comma2 - pos_comma1 - 1) AS decimal(18, 12)) INTO lat2;

SELECT
  ((ACOS(SIN(lat1 * PI() / 180) * SIN(lat2 * PI() / 180) + COS(lat1 * PI() / 180) * COS(lat2 * PI() / 180) * COS((lon1 - lon2) * PI() / 180)) * 180 / PI()) * 60 * 1.1515) INTO distance;
	RETURN distance;

END
$$

DELIMITER ;

-- 
-- Dumping data for table doc_user_profile
--
INSERT INTO doc_user_profile VALUES
(1, 'sathish', 'ags', '1990-04-19 00:00:00', 'rprakashkgm@gmail.com', 'C6958362EE2418', NULL, '9080706050', NULL, 'Coimbtaore', 'cbe', '640041', '04257230450', 0, 0, 0, True, '2019-04-22 00:00:00', '/uploads/registration/proof/9080706050.gif'),
(2, 'sathish', 'ags', '1990-04-19 00:00:00', 'rprakashkgm@gmail.com', '70737E444D2700', NULL, '9080706050', NULL, 'Coimbtaore', 'cbe', '640041', '04257230450', 0, 0, 0, True, '2019-04-22 00:00:00', '/uploads/registration/proof/9080706050.gif'),
(3, 'suresh', 'ags', '1990-04-19 00:00:00', 'rprakashkgm@gmail.com', '10C311A175D3660', NULL, '9080706050', NULL, 'Coimbtaore', 'cbe', '640041', '04257230450', 0, 0, 0, True, '2019-04-22 00:00:00', '/uploads/registration/proof/9080706050.gif'),
(4, 'saravanan', 'ags', '1990-04-19 00:00:00', 'rprakashkgm@gmail.com', '11EC4227D919810', NULL, '9080706050', NULL, 'Coimbtaore', 'cbe', '640041', '04257230450', 0, 0, 0, True, '2019-04-22 00:00:00', '/uploads/registration/proof/9080706050.gif'),
(5, 'sara', 'ags', '1990-04-19 00:00:00', 'rprakashkgm@gmail.com', 'A2FEF4B23B7AF0', NULL, '9080706050', NULL, 'Coimbtaore', 'cbe', '640041', '04257230450', 0, 0, 0, True, '2019-04-23 00:00:00', '/uploads/registration/proof_/9080706050.gif'),
(6, 'sara', 'ags', '1990-04-19 00:00:00', 'rprakashkgm@gmail.com', 'F411000233B2B0', NULL, '9080706050', NULL, 'Coimbtaore', 'cbe', '640041', '04257230450', 0, 0, 0, True, '2019-04-23 00:00:00', '/uploads/registration/proof_/9080706050.gif'),
(7, 'sara', 'ags', '1990-04-19 00:00:00', 'rprakashkgm@gmail.com', '12845ABA6D83050', NULL, '9080706050', NULL, 'Coimbtaore', 'cbe', '640041', '04257230450', 0, 0, 0, True, '2019-04-23 00:00:00', '/uploads/registration/proof_/9080706050.gif'),
(8, 'sara', 'ags', '1990-04-19 00:00:00', 'rprakashkgm@gmail.com', '84622646A3C8E0', '2019-04-23 08:24:20', '9080706050', NULL, 'Coimbtaore', 'cbe', '640041', '04257230450', 0, 0, 0, True, '2019-04-23 00:00:00', '/uploads/registration/proof_/9080706050.gif');

-- 
-- Dumping data for table doc_user
--
INSERT INTO doc_user VALUES
(1, 2, 0, '9080706050', 'rprakashkgm@gmail.com', 'vUqcQyS4lUmDcPqgLFc8Ztiljj3v6pcQjOXccTMlg2udMVbyzidq68zVxoJumZ3F5eRo30JuZNiayfNB+iOGhEQIhbns1PCQYQ6sySvtzFyvvD/of66RTqSuMrCCLQRlWtzEccpPziU=', 'ASDF93ERT2908IODFG85RVB30', False),
(2, 3, 0, '9080706050', 'rprakashkgm@gmail.com', '/NXcTGba+9OhO/ePSsQvPqRjxs3D0Xkj0+FSuCccJOaDGoR8XIVxMV3Ts6VPQNuTc2kWFSgsI/AuM42n3ae+1yfyw4Py5PH5Tv4f0ldspXJE70PlCIF6xYco2U8W9tFa0lLFLRN4Clo=', 'ASDF93ERT2908IODFG85RVB30', False),
(3, 4, 0, '9080706050', 'rprakashkgm@gmail.com', 'VHCnlWi6gbW7dWcPP9lNK+UFNzmsIZM7P/MRFKkTm84Ea5Jh33s6BIhaSCyDBLGp/qovj03Pa/ND6nmOEdi/AsP82rf9HeBd6xaJQxsTo5wEPrJ88xoE2/DoaJq8ustQifVbB/HFUQg=', 'ASDF93ERT2908IODFG85RVB30', False),
(4, 5, 0, '9080706050', 'rprakashkgm@gmail.com', 'yHEwoE9zJ3wYkbTgqyLyA0IeDeVjq6Hp/cziGfK0tQp8pQtE9qkeLl3ogNgi7Vn1GrYWlNKwg6JCg702Sl02XjDwPrsZix3d9uykATRYiJ3h57oNflPHQecl0qj3PGZeq6u1mZVNI10=', 'ASDF93ERT2908IODFG85RVB30', False),
(5, 6, 0, '9080706050', 'rprakashkgm@gmail.com', 'hBveQJClFbFOZwmqS3rusjix05frASJrgwwUPtvQa2wbn0iITYr9ju4tR5vhj/MC5s6z6p7/rpLmQqiVAW1VjvzbrxGzZNo4ArXsOiGIW9gzuwU6ONugXLSrc7zWhrEWTonaoq3XyEk=', 'ASDF93ERT2908IODFG85RVB30', False),
(6, 7, 0, '9080706050', 'rprakashkgm@gmail.com', 'ulHXwpAiLOPhFDFDVdshLB2qeqcpGMNDfNFG5+/n2we4FNsr6EVxpQ79xtoQlWIope3cthMrEyazWzWfb0Nfcc5ZGevXA4WSYpSar38Bfd1c2y7V1b+iw5bxHnwTe406Zr2tQ7VEIDA=', 'ASDF93ERT2908IODFG85RVB30', False),
(7, 8, 0, '9080706053', 'rprakashkgm@gmail.com', 'fMQjKMDZIlYaNzpZcDShVz4/foHxTGMB+aNFmRqq4uTwbkLlMOXj7w60zNnnM1dMXTYBVc+xdz/NCnfids66QVLT3r2yXz58Wnj0UMqRzvgdssaVdGO5FZvaw+OFmdyM9gMdLV+CTtk=', 'ASDF93ERT2908IODFG85RVB30', False);

-- 
-- Dumping data for table doc_status
--
INSERT INTO doc_status VALUES
(1, 1, '2019-05-26', '2019-05-26 09:00:00', '2019-05-26 23:59:00', True),
(2, 3, '2019-05-26', '2019-05-26 09:00:00', '2019-05-26 23:59:00', True);

-- 
-- Dumping data for table doc_mst_taxonomy
--
INSERT INTO doc_mst_taxonomy VALUES
(1, NULL, NULL, 'Surgerian', 'General Surgerian', '1', NULL, 'DoctorSpecialisation', NULL, 1, NULL, 1, '2019-05-06 00:00:00'),
(2, NULL, NULL, 'Dentaol', 'Dental', '2', NULL, 'DoctorSpecialisation', NULL, 2, NULL, 1, '2019-05-06 00:00:00'),
(3, NULL, NULL, 'Heart', 'Heart', '3', NULL, 'DoctorSpecialisation', NULL, 3, NULL, 1, '2019-05-06 00:00:00'),
(4, 1, NULL, 'Child', 'Child', '4', NULL, 'DoctorSpecialisation', NULL, 4, NULL, 1, '2019-05-06 00:00:00');

-- 
-- Dumping data for table doc_hospital_status
--
INSERT INTO doc_hospital_status VALUES
(2, 1, '2019-05-06 00:00:00', '2019-06-06 00:00:00', True, '2019-05-06 00:00:00', 1),
(3, 2, '2019-05-06 00:00:00', '2019-05-30 00:00:00', True, '2019-05-06 00:00:00', 1);

-- 
-- Dumping data for table doc_hospital_doctor_map
--
INSERT INTO doc_hospital_doctor_map VALUES
(1, 2, True),
(2, 1, True),
(1, 4, True),
(2, 3, True);

-- 
-- Dumping data for table doc_hospital
--
INSERT INTO doc_hospital VALUES
(1, 'KMCH', 'Nachimuthu', 'care@kmch.com', '0422-240350', '9080706050', '99, Avanashi Road,', '..\\uploads\\hospital\\logo\\kmch.png', True, '2019-05-06', 11.042570000000000000, 77.040625000000000000),
(2, 'GEM', 'GEM', 'gem@gem.in', '0432-90849', '8905678987', 'Ramanathapuram', '..\\uploads\\hospital\\logo\\kmch.png', True, '2019-05-06', 10.999569000000000000, 76.995457000000000000);

-- 
-- Dumping data for table doc_doctor_profile
--
INSERT INTO doc_doctor_profile VALUES
(1, 'Saranya', 'Prakash', 'MBBS', '0980786756', '0422-65456', 'doc@doctor.com', 1, '1990-04-19', '04-05-2015', 3, NULL, NULL, '2019-05-06', 1, True),
(2, 'Sathish', 'AGS', 'BDS', '9876654356', '0422', 'doc@gov.in', 2, '1980-03-06', '04-05-2010', 9, NULL, NULL, '2019-05-06', 1, True),
(3, 'Gowthaman', 's', 'MBBS', '9080786756', '04257-239877', 'gs@gmail.com', 3, '1975-05-07', '04-05-2012', 10, NULL, NULL, '2019-05-06', 1, True),
(4, 'Sujith', 'SM', 'MBBS', '90897867565', '04257230359', '04257-239877', 4, '1974-05-06', NULL, 15, NULL, NULL, '2019-05-06', 1, True);

-- 
-- Dumping data for table doc_booking_doctor
--
INSERT INTO doc_booking_doctor VALUES
(1, 1, 2, 'Ponraj', 2, 1234567890, '2019-05-24 19:47:00', NULL, NULL, NULL, NULL, False, '2019-05-23 09:28:39', '2019-05-24', 2, NULL),
(2, 1, 2, 'Selvan', 3, 6879880098, '2019-05-24 20:02:00', NULL, NULL, NULL, NULL, NULL, '2019-05-23 09:28:39', '2019-05-24', 2, NULL),
(3, 1, 2, 'Ponraj', 2, 1234567890, '2019-05-17 19:47:00', NULL, NULL, NULL, NULL, False, '2019-05-25 02:36:23', '2019-05-17', 2, NULL),
(4, 1, 2, 'Ponraj', 2, 1234567890, '2019-05-26 19:47:00', NULL, NULL, NULL, NULL, False, '2019-05-25 02:37:45', '2019-05-26', 2, NULL);

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;